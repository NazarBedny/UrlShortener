// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(UrlShortenerContext))]
    [Migration("20230802234930_Fix-a-few-fields-in-user-model")]
    partial class Fixafewfieldsinusermodel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Model.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47cf14c1-6ab0-40d3-b48b-de72c8559976"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("aba6e585-7cef-4efa-80be-6338ded67baf"),
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("DAL.Model.UrlModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortenedURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UrlModels");
                });

            modelBuilder.Entity("DAL.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e830091-5c1b-4f1a-b061-45091331a8c2"),
                            Email = "alex.admin@gmail.com",
                            Name = "Alex",
                            PasswordHash = new byte[] { 249, 202, 167, 133, 241, 31, 184, 23, 248, 29, 72, 212, 98, 98, 57, 111, 102, 72, 14, 43, 25, 155, 127, 103, 86, 85, 167, 16, 2, 147, 88, 232, 95, 184, 28, 31, 219, 188, 88, 134, 0, 151, 140, 63, 113, 50, 172, 182, 48, 170, 49, 25, 83, 59, 33, 207, 111, 251, 99, 78, 118, 166, 122, 206 },
                            PasswordSalt = new byte[] { 173, 224, 182, 188, 192, 205, 146, 105, 64, 169, 96, 83, 46, 72, 108, 129, 171, 110, 254, 15, 99, 55, 139, 222, 150, 179, 72, 122, 136, 74, 31, 18, 201, 53, 253, 121, 6, 106, 169, 47, 37, 122, 39, 83, 117, 255, 49, 201, 244, 147, 31, 99, 161, 92, 234, 234, 104, 218, 32, 8, 13, 24, 30, 41, 114, 16, 162, 125, 21, 244, 177, 1, 21, 151, 138, 121, 54, 67, 9, 69, 200, 53, 87, 176, 8, 120, 85, 232, 140, 232, 199, 76, 50, 193, 129, 177, 40, 105, 226, 43, 170, 19, 177, 230, 142, 254, 90, 30, 244, 163, 147, 50, 205, 15, 101, 152, 218, 254, 223, 193, 77, 103, 166, 225, 240, 73, 169, 87 },
                            RoleId = new Guid("aba6e585-7cef-4efa-80be-6338ded67baf"),
                            Surname = "Admin"
                        },
                        new
                        {
                            Id = new Guid("941029b8-5140-40be-a7c3-e80b526566bc"),
                            Email = "roma.user@gmail.com",
                            Name = "Roma",
                            PasswordHash = new byte[] { 249, 202, 167, 133, 241, 31, 184, 23, 248, 29, 72, 212, 98, 98, 57, 111, 102, 72, 14, 43, 25, 155, 127, 103, 86, 85, 167, 16, 2, 147, 88, 232, 95, 184, 28, 31, 219, 188, 88, 134, 0, 151, 140, 63, 113, 50, 172, 182, 48, 170, 49, 25, 83, 59, 33, 207, 111, 251, 99, 78, 118, 166, 122, 206 },
                            PasswordSalt = new byte[] { 173, 224, 182, 188, 192, 205, 146, 105, 64, 169, 96, 83, 46, 72, 108, 129, 171, 110, 254, 15, 99, 55, 139, 222, 150, 179, 72, 122, 136, 74, 31, 18, 201, 53, 253, 121, 6, 106, 169, 47, 37, 122, 39, 83, 117, 255, 49, 201, 244, 147, 31, 99, 161, 92, 234, 234, 104, 218, 32, 8, 13, 24, 30, 41, 114, 16, 162, 125, 21, 244, 177, 1, 21, 151, 138, 121, 54, 67, 9, 69, 200, 53, 87, 176, 8, 120, 85, 232, 140, 232, 199, 76, 50, 193, 129, 177, 40, 105, 226, 43, 170, 19, 177, 230, 142, 254, 90, 30, 244, 163, 147, 50, 205, 15, 101, 152, 218, 254, 223, 193, 77, 103, 166, 225, 240, 73, 169, 87 },
                            RoleId = new Guid("47cf14c1-6ab0-40d3-b48b-de72c8559976"),
                            Surname = "User"
                        });
                });

            modelBuilder.Entity("DAL.Model.UrlModel", b =>
                {
                    b.HasOne("DAL.Model.User", "CreatedBy")
                        .WithMany("Urls")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("DAL.Model.User", b =>
                {
                    b.HasOne("DAL.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Model.User", b =>
                {
                    b.Navigation("Urls");
                });
#pragma warning restore 612, 618
        }
    }
}
