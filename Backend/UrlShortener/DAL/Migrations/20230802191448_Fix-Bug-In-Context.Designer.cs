// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(UrlShortenerContext))]
    [Migration("20230802191448_Fix-Bug-In-Context")]
    partial class FixBugInContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Model.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47cf14c1-6ab0-40d3-b48b-de72c8559976"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("aba6e585-7cef-4efa-80be-6338ded67baf"),
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("85cd66d7-2998-4f29-8319-f9cfc08859c7"),
                            Name = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("DAL.Model.UrlModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortenedURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UrlModels");
                });

            modelBuilder.Entity("DAL.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UrlId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00285994-92f4-4995-8fa5-44989e3eab07"),
                            Email = "alex.admin@gmail.com",
                            Name = "Alex",
                            PasswordHash = new byte[] { 149, 110, 172, 76, 116, 193, 57, 53, 164, 123, 122, 167, 223, 26, 137, 129, 238, 80, 235, 235, 200, 161, 193, 56, 89, 109, 18, 175, 212, 181, 25, 29, 132, 48, 49, 207, 85, 17, 141, 213, 50, 153, 234, 64, 66, 195, 139, 15, 202, 13, 245, 86, 234, 38, 143, 250, 223, 170, 226, 133, 151, 106, 21, 72 },
                            PasswordSalt = new byte[] { 119, 82, 207, 149, 164, 199, 50, 18, 44, 92, 193, 197, 16, 244, 57, 219, 41, 138, 128, 36, 186, 76, 142, 51, 82, 220, 142, 118, 206, 222, 234, 12, 125, 118, 107, 97, 108, 11, 147, 18, 0, 6, 82, 210, 42, 170, 28, 199, 92, 240, 23, 95, 107, 45, 180, 176, 53, 78, 126, 113, 182, 151, 124, 143, 212, 137, 57, 230, 77, 236, 155, 69, 74, 2, 35, 94, 128, 235, 69, 34, 54, 101, 2, 177, 23, 134, 79, 61, 1, 10, 254, 126, 15, 37, 55, 12, 222, 226, 171, 106, 161, 210, 227, 188, 1, 182, 242, 161, 252, 74, 17, 75, 139, 12, 21, 82, 93, 63, 96, 156, 45, 26, 247, 91, 166, 172, 234, 213 },
                            RoleId = new Guid("aba6e585-7cef-4efa-80be-6338ded67baf"),
                            Surname = "Admin",
                            UrlId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("15ae95f7-118f-439b-8966-f8811185afe6"),
                            Email = "roma.user@gmail.com",
                            Name = "Roma",
                            PasswordHash = new byte[] { 149, 110, 172, 76, 116, 193, 57, 53, 164, 123, 122, 167, 223, 26, 137, 129, 238, 80, 235, 235, 200, 161, 193, 56, 89, 109, 18, 175, 212, 181, 25, 29, 132, 48, 49, 207, 85, 17, 141, 213, 50, 153, 234, 64, 66, 195, 139, 15, 202, 13, 245, 86, 234, 38, 143, 250, 223, 170, 226, 133, 151, 106, 21, 72 },
                            PasswordSalt = new byte[] { 119, 82, 207, 149, 164, 199, 50, 18, 44, 92, 193, 197, 16, 244, 57, 219, 41, 138, 128, 36, 186, 76, 142, 51, 82, 220, 142, 118, 206, 222, 234, 12, 125, 118, 107, 97, 108, 11, 147, 18, 0, 6, 82, 210, 42, 170, 28, 199, 92, 240, 23, 95, 107, 45, 180, 176, 53, 78, 126, 113, 182, 151, 124, 143, 212, 137, 57, 230, 77, 236, 155, 69, 74, 2, 35, 94, 128, 235, 69, 34, 54, 101, 2, 177, 23, 134, 79, 61, 1, 10, 254, 126, 15, 37, 55, 12, 222, 226, 171, 106, 161, 210, 227, 188, 1, 182, 242, 161, 252, 74, 17, 75, 139, 12, 21, 82, 93, 63, 96, 156, 45, 26, 247, 91, 166, 172, 234, 213 },
                            RoleId = new Guid("47cf14c1-6ab0-40d3-b48b-de72c8559976"),
                            Surname = "User",
                            UrlId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("5598d6df-69ae-4a91-9084-758880265f17"),
                            Email = "anatoliy.superadmin@gmail.com",
                            Name = "Anatoliy",
                            PasswordHash = new byte[] { 149, 110, 172, 76, 116, 193, 57, 53, 164, 123, 122, 167, 223, 26, 137, 129, 238, 80, 235, 235, 200, 161, 193, 56, 89, 109, 18, 175, 212, 181, 25, 29, 132, 48, 49, 207, 85, 17, 141, 213, 50, 153, 234, 64, 66, 195, 139, 15, 202, 13, 245, 86, 234, 38, 143, 250, 223, 170, 226, 133, 151, 106, 21, 72 },
                            PasswordSalt = new byte[] { 119, 82, 207, 149, 164, 199, 50, 18, 44, 92, 193, 197, 16, 244, 57, 219, 41, 138, 128, 36, 186, 76, 142, 51, 82, 220, 142, 118, 206, 222, 234, 12, 125, 118, 107, 97, 108, 11, 147, 18, 0, 6, 82, 210, 42, 170, 28, 199, 92, 240, 23, 95, 107, 45, 180, 176, 53, 78, 126, 113, 182, 151, 124, 143, 212, 137, 57, 230, 77, 236, 155, 69, 74, 2, 35, 94, 128, 235, 69, 34, 54, 101, 2, 177, 23, 134, 79, 61, 1, 10, 254, 126, 15, 37, 55, 12, 222, 226, 171, 106, 161, 210, 227, 188, 1, 182, 242, 161, 252, 74, 17, 75, 139, 12, 21, 82, 93, 63, 96, 156, 45, 26, 247, 91, 166, 172, 234, 213 },
                            RoleId = new Guid("85cd66d7-2998-4f29-8319-f9cfc08859c7"),
                            Surname = "Superadmin",
                            UrlId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("DAL.Model.UrlModel", b =>
                {
                    b.HasOne("DAL.Model.User", "CreatedBy")
                        .WithMany("Urls")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("DAL.Model.User", b =>
                {
                    b.HasOne("DAL.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Model.User", b =>
                {
                    b.Navigation("Urls");
                });
#pragma warning restore 612, 618
        }
    }
}
