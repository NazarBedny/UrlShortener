// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(UrlShortenerContext))]
    [Migration("20230802103706_Adding-A-New-Fields-In-UrlModel")]
    partial class AddingANewFieldsInUrlModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Model.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47cf14c1-6ab0-40d3-b48b-de72c8559976"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("aba6e585-7cef-4efa-80be-6338ded67baf"),
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("85cd66d7-2998-4f29-8319-f9cfc08859c7"),
                            Name = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("DAL.Model.UrlModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortenedURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("UrlModels");
                });

            modelBuilder.Entity("DAL.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1417bdfe-a80b-4168-aab4-5c7ae5647b90"),
                            Email = "alex.admin@gmail.com",
                            Name = "Alex",
                            PasswordHash = new byte[] { 120, 158, 204, 198, 125, 32, 70, 202, 216, 212, 25, 101, 117, 166, 182, 166, 238, 156, 245, 142, 63, 228, 57, 45, 144, 150, 6, 195, 211, 160, 74, 64, 222, 24, 82, 238, 25, 135, 75, 85, 122, 120, 181, 163, 151, 79, 86, 189, 101, 21, 166, 81, 133, 109, 158, 100, 162, 191, 32, 59, 123, 207, 165, 86 },
                            PasswordSalt = new byte[] { 185, 125, 248, 101, 14, 180, 137, 107, 51, 93, 73, 99, 213, 109, 203, 145, 158, 61, 55, 2, 72, 135, 142, 20, 71, 53, 188, 109, 49, 2, 48, 117, 126, 73, 93, 235, 233, 0, 86, 139, 44, 45, 173, 222, 210, 55, 42, 10, 1, 39, 227, 105, 139, 144, 32, 113, 155, 164, 221, 139, 155, 141, 20, 228, 227, 195, 102, 241, 73, 42, 168, 107, 161, 8, 197, 27, 8, 151, 68, 113, 59, 182, 214, 71, 66, 255, 85, 181, 9, 16, 194, 175, 82, 237, 166, 172, 188, 227, 132, 154, 130, 206, 190, 36, 201, 198, 175, 144, 45, 161, 42, 2, 230, 92, 224, 181, 216, 199, 36, 0, 60, 232, 38, 244, 21, 77, 199, 149 },
                            RoleId = new Guid("aba6e585-7cef-4efa-80be-6338ded67baf"),
                            Surname = "Admin"
                        },
                        new
                        {
                            Id = new Guid("86becf42-cd7a-4f94-8674-e30f6c457167"),
                            Email = "roma.user@gmail.com",
                            Name = "Roma",
                            PasswordHash = new byte[] { 120, 158, 204, 198, 125, 32, 70, 202, 216, 212, 25, 101, 117, 166, 182, 166, 238, 156, 245, 142, 63, 228, 57, 45, 144, 150, 6, 195, 211, 160, 74, 64, 222, 24, 82, 238, 25, 135, 75, 85, 122, 120, 181, 163, 151, 79, 86, 189, 101, 21, 166, 81, 133, 109, 158, 100, 162, 191, 32, 59, 123, 207, 165, 86 },
                            PasswordSalt = new byte[] { 185, 125, 248, 101, 14, 180, 137, 107, 51, 93, 73, 99, 213, 109, 203, 145, 158, 61, 55, 2, 72, 135, 142, 20, 71, 53, 188, 109, 49, 2, 48, 117, 126, 73, 93, 235, 233, 0, 86, 139, 44, 45, 173, 222, 210, 55, 42, 10, 1, 39, 227, 105, 139, 144, 32, 113, 155, 164, 221, 139, 155, 141, 20, 228, 227, 195, 102, 241, 73, 42, 168, 107, 161, 8, 197, 27, 8, 151, 68, 113, 59, 182, 214, 71, 66, 255, 85, 181, 9, 16, 194, 175, 82, 237, 166, 172, 188, 227, 132, 154, 130, 206, 190, 36, 201, 198, 175, 144, 45, 161, 42, 2, 230, 92, 224, 181, 216, 199, 36, 0, 60, 232, 38, 244, 21, 77, 199, 149 },
                            RoleId = new Guid("47cf14c1-6ab0-40d3-b48b-de72c8559976"),
                            Surname = "User"
                        },
                        new
                        {
                            Id = new Guid("629dcaae-1972-49af-b220-fc74bf3fb569"),
                            Email = "anatoliy.superadmin@gmail.com",
                            Name = "Anatoliy",
                            PasswordHash = new byte[] { 120, 158, 204, 198, 125, 32, 70, 202, 216, 212, 25, 101, 117, 166, 182, 166, 238, 156, 245, 142, 63, 228, 57, 45, 144, 150, 6, 195, 211, 160, 74, 64, 222, 24, 82, 238, 25, 135, 75, 85, 122, 120, 181, 163, 151, 79, 86, 189, 101, 21, 166, 81, 133, 109, 158, 100, 162, 191, 32, 59, 123, 207, 165, 86 },
                            PasswordSalt = new byte[] { 185, 125, 248, 101, 14, 180, 137, 107, 51, 93, 73, 99, 213, 109, 203, 145, 158, 61, 55, 2, 72, 135, 142, 20, 71, 53, 188, 109, 49, 2, 48, 117, 126, 73, 93, 235, 233, 0, 86, 139, 44, 45, 173, 222, 210, 55, 42, 10, 1, 39, 227, 105, 139, 144, 32, 113, 155, 164, 221, 139, 155, 141, 20, 228, 227, 195, 102, 241, 73, 42, 168, 107, 161, 8, 197, 27, 8, 151, 68, 113, 59, 182, 214, 71, 66, 255, 85, 181, 9, 16, 194, 175, 82, 237, 166, 172, 188, 227, 132, 154, 130, 206, 190, 36, 201, 198, 175, 144, 45, 161, 42, 2, 230, 92, 224, 181, 216, 199, 36, 0, 60, 232, 38, 244, 21, 77, 199, 149 },
                            RoleId = new Guid("85cd66d7-2998-4f29-8319-f9cfc08859c7"),
                            Surname = "Superadmin"
                        });
                });

            modelBuilder.Entity("DAL.Model.UrlModel", b =>
                {
                    b.HasOne("DAL.Model.User", "CreatedBy")
                        .WithMany("Urls")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("DAL.Model.User", b =>
                {
                    b.HasOne("DAL.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Model.User", b =>
                {
                    b.Navigation("Urls");
                });
#pragma warning restore 612, 618
        }
    }
}
